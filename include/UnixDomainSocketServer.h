///////////////////////////////////////////////////////////
/// @file	UnixDomainSocketServer.h
/// @brief	UNIXドメインソケットサーバー
/// @author	shuji-morimoto
/// Copyright (C) 2013- Mamezou. All rights reserved.
///////////////////////////////////////////////////////////

#ifndef __UNIX_DOMAIN_SOCKET_SERVER__
#define __UNIX_DOMAIN_SOCKET_SERVER__

#include "UnixDomainSocket.h"
#include "Mutex.h"
#include "Thread.h"

namespace PicoIPC {

///////////////////////////////////////////////////////////
/// @class	IRequestReceiver
/// @brief	リクエスト受信インタフェース
/// 
/// - クライアントからのリクエストメッセージを受信したときにコールされる
/// - このインタフェースを実装してリクエストメッセージを受信したときの処理を実装する
/// - 受信したときの処理は速やかに終えること
///
///////////////////////////////////////////////////////////
class IRequestReceiver
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		デストラクタ
	///////////////////////////////////////////////////////////
	virtual ~IRequestReceiver() {};

	///////////////////////////////////////////////////////////
	/// @brief		リクエスト受信処理を実装する
	///
	/// この処理を終えるまで次の受信を待つため速やかに処理を終えること
	///
	/// @param[in]	request 受信データ
	/// @param[out]	response 応答データ
	/// @note		応答を送信するまで次の受信を待つ
	/// @note		受信データに応じて適切な応答データを返すこと
	///////////////////////////////////////////////////////////
	virtual void Received(ByteBuffer &request, ByteBuffer &response) = 0;

	///////////////////////////////////////////////////////////
	/// @brief		リクエスト受信時にエラーが発生したときコールされる
	/// @param[in]	error エラー内容
	/// @note		デフォルトは何もしない
	///////////////////////////////////////////////////////////
	virtual void ReceiveError(const Error &error) {};

	///////////////////////////////////////////////////////////
	/// @brief		応答送信時にエラーが発生したときコールされる
	/// @param[in]	error エラー内容
	/// @note		デフォルトは何もしない
	///////////////////////////////////////////////////////////
	virtual void ResponseError(const Error &error) {};
};

///////////////////////////////////////////////////////////
/// @class	UnixDomainSocketServer
/// @brief	UNIXドメインソケットサーバー
/// 
/// - UnixDomainSocketを継承したクラス
/// - リクエスト受信処理は内部でスレッド処理しているためIRunnableを実装している
/// - 接続相手(クライアント)からのリクエストを受信し何らかの処理を行い、
///   応答を送信するにはIRequestReceiverを実装すること
/// - 接続相手(クライアント)へメッセージを通知したい場合はNotify()をコールすること
///
///////////////////////////////////////////////////////////
class UnixDomainSocketServer : public UnixDomainSocket, public IRunnable
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		コンストラクタ
	/// @param[in]	path ソケットを表すファイルパス
	/// @note		pathは通信相手(クライアント)と同じパスを設定する必要がある
	///////////////////////////////////////////////////////////
	UnixDomainSocketServer(const std::string &path);

	///////////////////////////////////////////////////////////
	/// @brief		デストラクタ
	///////////////////////////////////////////////////////////
	virtual ~UnixDomainSocketServer();

	///////////////////////////////////////////////////////////
	/// @brief		IRequestReceiverを設定する
	/// @param[in]	receiver IRequestReceiver
	/// @note		
	///////////////////////////////////////////////////////////
	void SetReceiver(IRequestReceiver *receiver);

	///////////////////////////////////////////////////////////
	/// @brief		接続相手(クライアント)からのリクエスト受信処理を開始する
	/// @param[in]	isBlock Stop()が呼ばれるまでこのメソッドでブロックしたい場合true
	/// @note		isBlockがtrueのときは別スレッドがStop()をコールすることになる
	///////////////////////////////////////////////////////////
	void Start(bool isBlock);

	///////////////////////////////////////////////////////////
	/// @brief		接続相手(クライアント)からのリクエスト受信処理を停止する
	/// @note		
	///////////////////////////////////////////////////////////
	void Stop();

	///////////////////////////////////////////////////////////
	/// @brief		接続相手(クライアント)にメッセージを通知する
	/// @param[in]	update 通知するメッセージ
	/// @return		Error 失敗したときエラー内容がErrorに設定される
	/// @note		一方通行のメッセージ送信なので応答はない
	///////////////////////////////////////////////////////////
	Error Notify(ByteBuffer &update);

	///////////////////////////////////////////////////////////
	/// @brief		接続相手(クライアント)にPINGを送信する
	/// @param[in]	なし
	/// @return		Error 失敗したときエラー内容がErrorに設定される
	/// @note		成功の場合、クライアントは送受信の準備ができている状態
	///////////////////////////////////////////////////////////
	Error Ping();

	///////////////////////////////////////////////////////////
	/// @brief		implements IRunnable::Run()
	/// @note		このメソッドをコールしてはいけない
	///////////////////////////////////////////////////////////
	void Run();

private:
	Mutex             mMutex;           ///< 送信処理の同期をとるためのMutex
	Thread            mReceiveThread;   ///< 受信処理Thread
	IRequestReceiver *mRequestReceiver; ///< IRequestReceiver
	bool              mIsActive;        ///< 活性化状態
};
}
#endif
