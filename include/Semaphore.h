///////////////////////////////////////////////////////////
/// @file	Semaphore.h
/// @brief	セマフォ
/// @author	shuji-morimoto
/// Copyright (C) 2013- Mamezou. All rights reserved.
///////////////////////////////////////////////////////////

#ifndef __PICO_IPC_SEMAPHORE__
#define __PICO_IPC_SEMAPHORE__

#include <semaphore.h>
#include <string>
#include "Error.h"

namespace PicoIPC {

///////////////////////////////////////////////////////////
/// @class Semaphore
/// @brief	POSIX名前付きセマフォ
/// 
/// クリティカルセクションでアトミック性を確保するため、
/// プロセス間(スレッドも可能)での排他制御や同期機構を提供する
/// 
///////////////////////////////////////////////////////////
class Semaphore {
public:
	///////////////////////////////////////////////////////////
	/// @brief		指定した名前のセマフォが存在するか確認する
	/// @return		Error
	/// @note		nameは'/'で開始する必要がある。例) "/semahore1"
	///////////////////////////////////////////////////////////
	static Error Exist(const std::string &name);

	///////////////////////////////////////////////////////////
	/// @brief		コンストラクタ
	/// @param[in]	name 名前
	/// @param[in]	isOwner 所有権
	/// @note		nameは'/'で開始する必要がある。例) "/semahore1"
	/// @note		isOwnerがtrueの場合 セマフォの作成/削除を行い<br/>
	/// 			falseの場合は作成済みのセマフォを利用する
	///////////////////////////////////////////////////////////
	Semaphore(const std::string &name, bool isOwner);

	///////////////////////////////////////////////////////////
	/// @brief		デストラクタ
	/// @note
	///////////////////////////////////////////////////////////
	virtual ~Semaphore();

	///////////////////////////////////////////////////////////
	/// @brief		名前を取得する
	/// @return		名前
	/// @note
	///////////////////////////////////////////////////////////
	const std::string &Name() const;

	///////////////////////////////////////////////////////////
	/// @brief		セマフォをロック(獲得)するまで待機する
	/// @note		セマフォをロックした別のプロセスやスレッドが
	/// 			Post()でロックを解除するまで待機する
	/// @note		各プロセスやスレッドがWait()した順にロックを
	/// 			獲得するとは限らないことに注意
	///////////////////////////////////////////////////////////
	void Wait();

	///////////////////////////////////////////////////////////
	/// @brief		セマフォのロックを解除する
	/// @note		Wait()で待機している別のプロセスやスレッドが
	///				呼び起こされて、セマフォをロックできるようになる
	///////////////////////////////////////////////////////////
	void Post();

private:
public:
	std::string  mName;      ///< 名前
	bool		 mIsOwner;   ///< 所有権
	sem_t		*mSemaphore; ///< POSIX セマフォ
};
}
#endif
