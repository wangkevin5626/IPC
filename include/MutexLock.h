///////////////////////////////////////////////////////////
/// @file	MutexLock.h
/// @brief	Mutexのロック
/// @author	shuji-morimoto
/// Copyright (C) 2013- Mamezou. All rights reserved.
///////////////////////////////////////////////////////////

#ifndef __PICO_IPC_MUTEX_LOCK__
#define __PICO_IPC_MUTEX_LOCK__

#include "Mutex.h"

namespace PicoIPC {

///////////////////////////////////////////////////////////
/// @class MutexLock
/// @brief	Mutexのロック/ロック解除を自動化する
///
/// コンストラクタでMutexをロックし、デストラクタで解除するため
/// スタック領域(ローカル変数)で利用すること
///
///////////////////////////////////////////////////////////
class MutexLock
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		コンストラクタ
	/// @param[in]	mutex Mutex*
	///////////////////////////////////////////////////////////
	MutexLock(Mutex *mutex);

	///////////////////////////////////////////////////////////
	/// @brief		コンストラクタ
	/// @param[in]	mutex Mutex*
	/// @param[in]	isYieldEnd デストラクタ後に呼び出したスレッドがCPU使用権を手放すときtrue
	///////////////////////////////////////////////////////////
	MutexLock(Mutex *mutex, bool isYieldEnd);

	///////////////////////////////////////////////////////////
	/// @brief		デストラクタ
	///////////////////////////////////////////////////////////
	virtual ~MutexLock();

	///////////////////////////////////////////////////////////
	/// @brief		呼び出したスレッドがロックを待機する
	/// @param[in]	なし
	/// @return		なし
	/// @note		待機中はMutexのロックは一時的に解除される
	///				起きたとき(Wait()から抜けた時)はMutexのロックが獲得された状態となる<br/>
	///////////////////////////////////////////////////////////
	void Wait();

	///////////////////////////////////////////////////////////
	/// @brief		待機中のスレッドの１つを起こす
	/// @param[in]	なし
	/// @return		なし
	/// @note		複数スレッドが待機中の場合、どのスレッドが起きるかは指定できない<br/>
	///////////////////////////////////////////////////////////
	void Signal();

	///////////////////////////////////////////////////////////
	/// @brief		待機中のスレッドすべてを起こす
	/// @param[in]	なし
	/// @return		なし
	/// @note		どの順番でスレッドが起きるかは指定できない
	///////////////////////////////////////////////////////////
	void Broadcast();

private:
	Mutex *mMutex;		///< Mutex
	bool   mIsYieldEnd; ///< デストラクタ後に呼び出したスレッドがCPU使用権を手放すかどうか
};

}
#endif
