///////////////////////////////////////////////////////////
/// @file	Mutex.h
/// @brief	ミューテックス
/// @author	shuji-morimoto
/// Copyright (C) 2013- Mamezou. All rights reserved.
///////////////////////////////////////////////////////////

#ifndef __PICO_IPC_MUTEX__
#define __PICO_IPC_MUTEX__

#include <pthread.h>

namespace PicoIPC {

///////////////////////////////////////////////////////////
/// @class Mutex
/// @brief	POSIX ミューテックス
/// 
/// クリティカルセクションでアトミック性を確保するため、
/// スレッド間での排他制御や同期機構を提供する
/// 
///////////////////////////////////////////////////////////
class Mutex
{
public:
	///////////////////////////////////////////////////////////
	/// @brief		コンストラクタ
	/// @param[in]	なし
	///////////////////////////////////////////////////////////
	Mutex();

	///////////////////////////////////////////////////////////
	/// @brief		デストラクタ
	///////////////////////////////////////////////////////////
	virtual ~Mutex();

	///////////////////////////////////////////////////////////
	/// @brief		呼び出したスレッドがロックを獲得するまで待つ
	/// @param[in]	なし
	/// @return		なし
	/// @note		デッドロックを避けるためLock()とUnlock()は常にペアで扱うこと
	///////////////////////////////////////////////////////////
	void Lock();

	///////////////////////////////////////////////////////////
	/// @brief		呼び出したスレッドがロックを解除する
	/// @param[in]	なし
	/// @return		なし
	/// @note		デッドロックを避けるためLock()とUnlock()は常にペアで扱うこと
	///////////////////////////////////////////////////////////
	void Unlock();

	///////////////////////////////////////////////////////////
	/// @brief		このクラスが保持する条件変数を利用して呼び出したスレッドを待機する
    ///              等待利用该班保持的条件变量来调用的线程
	/// @param[in]	なし
	/// @return		なし
	/// @note		このクラスのロックを獲得している(Lock()する)必要がある<br/>
	///				待機中はMutexのロックは一時的に解除され、<br/>
    ///              待机中Mutex的锁暂时被解除，
	///				起きたとき(Wait()から抜けた時)はMutexのロックが獲得された状態となる<br/>
    ///              起床时（Wat（）脱离的时候）是Mutex的锁被获得的状态
	///////////////////////////////////////////////////////////
	void ConditionWait();

	///////////////////////////////////////////////////////////
	/// @brief		このクラスが保持する条件変数で待機しているスレッドを起こす(シグナル送信する)
	/// @param[in]	なし
	/// @return		なし
	/// @note		このクラスのロックを獲得している(Lock()する)必要がある<br/>
	///				複数スレッドがWait()中の場合、どのスレッドが起きるかは指定できない<br/>
	///////////////////////////////////////////////////////////
	void ConditionSignal();

	///////////////////////////////////////////////////////////
	/// @brief		このクラスが保持する条件変数で待機しているすべてのスレッドを起こす(シグナル送信する)
	/// @param[in]	なし
	/// @return		なし
	/// @note		このクラスのロックを獲得している(Lock()する)必要がある<br/>
	///				どの順番でスレッドが起きるかは指定できない
	///////////////////////////////////////////////////////////
	void ConditionBroadcast();

private:
	::pthread_mutex_t mMutex;	  ///< POSIX Mutex
	::pthread_cond_t  mCondition; ///< 条件変数
};

}
#endif
