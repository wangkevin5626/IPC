///////////////////////////////////////////////////////////
/// @file	SharedMemory.h
/// @brief	共有メモリー
/// @author	shuji-morimoto
/// Copyright (C) 2013- Mamezou. All rights reserved.
///////////////////////////////////////////////////////////

#ifndef __PICO_IPC_SHARED_MEMORY__
#define __PICO_IPC_SHARED_MEMORY__

#include <string>
#include <cassert>
#include "Semaphore.h"
#include "Error.h"

namespace PicoIPC {

///////////////////////////////////////////////////////////
/// @class SharedMemory
/// @brief	POSIX 共有メモリー
/// 
/// - 複数のプロセス間で共有できるメモリー領域を管理(作成・アクセス・削除)する 
/// - 利用者が定義した構造体(POD[Plain Old Data]型のみサポート)を共有メモリー領域にマッピングする
/// - メモリー領域は固定長となる
/// - 共有メモリーごとにSemaphoreを利用して排他制御や同期機構を提供する
///
///////////////////////////////////////////////////////////
class SharedMemory {
public:
	///////////////////////////////////////////////////////////
	/// @brief		指定した名前の共有メモリーが存在するか確認する
	/// @return		Error
	/// @note		nameは'/'で開始する必要がある。例) "/shared_memory1"
	///////////////////////////////////////////////////////////
	static Error Exist(const std::string &name);
	
	///////////////////////////////////////////////////////////
	/// @brief		コンストラクタ
	/// @param[in]	name 名前
	/// @param[in]	size 共有メモリーサイズ
	/// @param[in]	isOwner 所有権
	/// @note		nameは'/'で開始する必要がある。例) "/shared_memory1"
	/// @note		isOwnerがtrueの場合 共有メモリーの作成/削除を行い<br/>
	/// 			falseの場合は作成済みの共有メモリーを利用する
	///////////////////////////////////////////////////////////
	SharedMemory(const std::string &name, size_t size, bool isOwner);

	///////////////////////////////////////////////////////////
	/// @brief		デストラクタ
	///////////////////////////////////////////////////////////
	virtual ~SharedMemory();

	///////////////////////////////////////////////////////////
	/// @brief		名前を取得する
	/// @return		名前
	/// @note
	///////////////////////////////////////////////////////////
	const std::string &Name() const;

	///////////////////////////////////////////////////////////
	/// @brief		共有メモリー領域を指定したタイプで取得する
	/// @return		テンプレートTのポインタ
	/// @note		コンストラクタで指定したサイズ >= sizeof(テンプレートT)であること
	///////////////////////////////////////////////////////////
	template<typename T> T *Data()
	{
		return reinterpret_cast<T *>(mMemoryMap);
	}

	///////////////////////////////////////////////////////////
	/// @brief		ロック(獲得)するまで待機する
	/// @note		ロックした別のプロセスやスレッドが
	/// 			Post()でロックを解除するまで待機する
	/// @note		各プロセスやスレッドがWait()した順にロックを
	/// 			獲得するとは限らないことに注意
	///////////////////////////////////////////////////////////
	void Wait();

	///////////////////////////////////////////////////////////
	/// @brief		ロックを解除する
	/// @note		Wait()で待機している別のプロセスやスレッドが
	///				呼び起こされて、ロックできるようになる
	///////////////////////////////////////////////////////////
	void Post();

private:
	std::string  mName;      ///< 名前
	bool         mIsOwner;   ///< 所有権
	void        *mMemoryMap; ///< 共有メモリー領域
	size_t       mSize;      ///< サイズ
	Semaphore   *mSemaphore; ///< セマフォ
};
}
#endif
